buildscript {
    ext {
        verKotlin = '1.3.10'
        verSpringData = '2.0.10.RELEASE'
        verSpringDepManage = '1.0.6.RELEASE'
        verShiro = '1.4.0'
        verJooq = '3.11.5'
        verSwaggerStarter = '1.8.0.RELEASE'
        verDokka = '0.9.17'
    }
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$verKotlin")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$verKotlin")
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$verDokka"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.dokka'

group = 'com.github.rainmanhhh'
version = '0.0.11'

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${verKotlin}")
    compile("org.jooq:jooq:${verJooq}")
    compile("org.apache.shiro:shiro-spring:${verShiro}")
    compile("org.springframework.data:spring-data-commons:${verSpringData}")
    compile("com.spring4all:swagger-spring-boot-starter:${verSwaggerStarter}")
    compile("javax.servlet:javax.servlet-api:4.0.1")
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from(sourceSets.main.allSource)
}

//task generateSourcesJar(type: Jar) {
//    group = 'jar'
//    from sourceSets.main.java.srcDirs
//    classifier = 'sources'
//}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = javadoc.destinationDir
}

task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    group = 'jar'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives generateJavadoc
}

//
//task javadocJar(type: Jar) {
//    classifier = 'javadoc'
//    from(javadoc)
//}

//artifacts {
//    archives jar
//    archives sourceJar
////    archives javadocJar
//}